-  _Tutkimuskysymyksiin vastaaminen_ (vasta kun muut osiot on kirjoitettu)
	- Millaista käsitteistöä laiskan evaluoinnin yhteydessä käytetään?
		- Paljon päällekkäistä käsitteistöä mikä hankaloittaa aiheeseen tutustumista
	- Mikä on laiskan evaluoinnin merkitys tietojenkäsittelytieteen historiassa ja nykypäivänä?
		- Vaikuttaa siltä, että funktionaalisen ohjelmoinnin kehitykselle normal-order evaluation on ollut keskeistä
		- Laiskaa evaluointia osataan käyttää yhä kypsemmin: sen ja applicative semanticsin välillä osataan tasapainotella, ja laiskaa evaluointia käytetään paljon rajatummin kuin aikaisemmin
	- Millaisia etuja ja heikkouksia laiskaan evaluointiin liittyy?
		- Laajamittaiseen käyttöön liittyy paljon ongelmia, koska sekä ajan- että tilankäyttö vaikeasti ennakoitavaa (…ja kielen käänAtäjän toteutus monimutkaistuu).
		- Ilmaisuvoima ei merkittävästi parane.
		- Muistivuotojen identifioiminen hankalampaa, kun suoritusjärjestys ei ole helposti seurattavissa. Ei laadukkaita debuggereita tarjolla laiskoihin kieliin.
- _Metodologisia puutteita_
	- Yksittäisiin lähteisiin nojataan liikaa
	- Mielipidetutkimuksen otos oli pieni
- _Tulevaisuudennäkymiä_
	- Voisi nostaa esiin kiinnostavan, uuden trendin: täydelliset funktionaaliset kielet, joissa funktiot ovat täydellisesti määriteltyjä, eli ne terminoituvat aina (= bottomia/undefinedia ei ole). Näiden kannalta ei ole mitään väliä, onko kieli vai laiska vai ei; käytännössä fiksumpaa valita ei-laiskuus koska tällöin laiskuuden aiheuttamilta haasteilta vältytään. Konkreettisena esimerkkinä Haskellin kaltainen Idris, joka on saanut aika kivasti nostetta viime vuosina.
	- Voi nähdä, että normal-order kieliä kohtaan on laskeva kiinnostus, mutta monissa applicative order -kielissä tarjotaan työkaluja tarkkaan rajattua laiskaa evaluointia varten
- _Ehdotuksia_ (onko tämä vähän irrallinen?)
	- Olisi hyvä, jos funktionaalisten kielien laatijat (etenkin Haskellin tekijät) ottaisivat kantaa, mitä evaluointisemantiikkoihin käsitteitä he haluavat käyttää ja mitä olla käyttämättä. Näin tilanteeseen tulisi selkeyttä.
- _Mahdollisia tutkimuskysymyksiä_
	- Miten tässä työssä esitellyt laiskan evaluoinnin sovellutuksia voisi toteuttaa muihin suosittuihin ohjelmointikieliin, kuten Javaan tai Go:hon?
	- Miten laiskasti evaluoiduissa kielissä nopeuteen ja muistinkäyttöön liittyvistä ongelmista voitaisiin päästä eroon?
	- Kuinka kääntäjät voisivat automaattisesti käyttää laiskaa evaluointia, jos se vaikuttaa tehokkaimmalta jonkin koodinpätkän ajamiseen?
